package rbadia.voidspace.main;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.util.List;
import java.util.Random;
import java.util.TimerTask;
import java.util.Timer;

import javax.swing.JLabel;
import javax.swing.JPanel;
import rbadia.voidspace.graphics.GraphicsManager;
import rbadia.voidspace.model.Asteroid;
import rbadia.voidspace.model.Boss;
import rbadia.voidspace.model.EnemyBullet;
import rbadia.voidspace.model.EnemyShip;
import rbadia.voidspace.model.Bullet;
import rbadia.voidspace.model.Ship;
import rbadia.voidspace.sounds.SoundManager;

/**
 * Main game screen. Handles all game graphics updates and some of the game logic.
 */
public class GameScreen extends JPanel {
	private static final long serialVersionUID = 1L;

	protected BufferedImage backBuffer;
	protected Graphics2D g2d;

	private static final int NEW_SHIP_DELAY = 500;
	private static final int NEW_ASTEROID_DELAY = 500;
	private static final int NEW_BOSS_DELAY = 800;
	private static final int NEW_ENEMYSHIP_DELAY = 500;

	private long lastShipTime;
	private long lastAsteroidTime;
	private long lastEnemyShipTime;
	private long lastBossShipTime;
	private long lastEnemyBulletTime;
	private int hitsBoss=0;
	private int hitsReq=15;
	private long asteroidsReq = 5;
	private long bulletsFiredBoss = 0;
	private boolean bossDmg=false;
	private static long level = 1;



	private Rectangle asteroidExplosion;
	private Rectangle bossExplosion;
	private Rectangle shipExplosion;

	private JLabel shipsValueLabel;
	private JLabel destroyedValueLabel;
	private JLabel scoreValueLabel;

	protected Random rand;

	private Font originalFont;
	private Font bigFont;
	private Font biggestFont;
	private boolean entry = false;

	private GameStatus status;
	private SoundManager soundMan;
	protected GraphicsManager graphicsMan;
	private GameLogic gameLogic;


	/**
	 * This method initializes 
	 * 
	 */


	public GameScreen() {
		super();
		// initialize random number generator
		rand = new Random();

		initialize();

		// init graphics manager
		graphicsMan = new GraphicsManager();

		// init back buffer image
		backBuffer = new BufferedImage(500, 400, BufferedImage.TYPE_INT_RGB);
		g2d = backBuffer.createGraphics();
	}

	/**
	 * Initialization method (for VE compatibility).
	 */
	private void initialize() {
		// set panel properties
		this.setSize(new Dimension(500, 400));
		this.setPreferredSize(new Dimension(500, 400));
		this.setBackground(Color.BLACK);
	}

	/**
	 * Update the game screen.
	 */
	@Override
	protected void paintComponent(Graphics g) {
		super.paintComponent(g);
		// draw current backbuffer to the actual game screen
		g.drawImage(backBuffer, 0, 0, this);
	}

	/**
	 * Update the game screen's backbuffer image.
	 */
	public void updateScreen(){

		Ship ship = gameLogic.getShip();
		EnemyShip enemyShip = gameLogic.getEnemyShip();
		Asteroid asteroid = gameLogic.getAsteroid();
		Boss boss = gameLogic.getBoss();
		List<Bullet> bullets = gameLogic.getBullets();
		List<EnemyBullet> enemyBullets = gameLogic.getEnemyBullets();

		if(asteroidsReq == status.getAsteroidsDestroyed()){
			asteroidsReq=asteroidsReq+5;
			// delay to display "New Level" message for 1.5 seconds
			asteroid.setSpeed(asteroid.getSpeed()+1);
			level++;
			status.setLevelUp(true);



		}

		// set original font - for later use
		if(this.originalFont == null){
			this.originalFont = g2d.getFont();
			this.bigFont = originalFont;
		}

		// erase screen
		g2d.setPaint(Color.BLACK);
		g2d.fillRect(0, 0, getSize().width, getSize().height);

		// draw 50 random stars
		drawStars(50);

		// if the game is starting, draw "Get Ready" message
		if(status.isGameStarting()){
			drawGetReady();
			return;
		}

		// if the game is over, draw the "Game Over" message
		if(status.isGameOver()){
			// draw the message
			drawGameOver();

			long currentTime = System.currentTimeMillis();
			// draw the explosions until their time passes
			if((currentTime - lastAsteroidTime) < NEW_ASTEROID_DELAY){
				graphicsMan.drawAsteroidExplosion(asteroidExplosion, g2d, this);
			}
			if((currentTime - lastShipTime) < NEW_SHIP_DELAY){
				graphicsMan.drawShipExplosion(shipExplosion, g2d, this);
			}
			return;
		}
		if(status.isLevelUp()){
			// draw the message

			Timer timer = new Timer();

			timer.schedule(new TimerTask() {
				@Override
				public void run() {
					// Your database code here
					drawLevelUp();
					long currentTime = System.currentTimeMillis();
					// draw the explosions until their time passes
//					if((currentTime - lastAsteroidTime) < NEW_ASTEROID_DELAY){
//						graphicsMan.drawAsteroidExplosion(asteroidExplosion, g2d, imageObserver);
//					}
//					if((currentTime - lastShipTime) < NEW_SHIP_DELAY){
//						graphicsMan.drawShipExplosion(shipExplosion, g2d, graphicsMan);
					}
				}
			}, 2*60*1000);
			status.setLevelUp(false);
			return;
		}


		// the game has not started yet
		if(!status.isGameStarted()){
			// draw game title screen
			initialMessage();
			return;
		}

		// draw asteroid
		if(!status.isNewAsteroid()){

			//			if((asteroid.getX()==0) || (asteroid.getX()==(this.getWidth()-asteroid.getAsteroidWidth()))){
			//				asteroid.setAngle(-asteroid.getAngle());
			//			}

			if(level == 1){
				// draw the asteroid until it reaches the bottom of the screen
				if(asteroid.getY() + asteroid.getSpeed() < this.getHeight()){
					asteroid.translate(asteroid.getAngle(), asteroid.getSpeed());
					graphicsMan.drawAsteroid(asteroid, g2d, this);
				}

				else{
					asteroid.setLocation(rand.nextInt(getWidth() - asteroid.width), 0);
				}
			}

			if((level >= 2) && (level%5 != 0)){

				// draw the asteroid until it reaches the bottom of the screen

				//				if((asteroid.getX()==0) || (asteroid.getX()==(this.getWidth()-asteroid.getAsteroidWidth()))){
				//					asteroid.setAngle(-asteroid.getAngle());
				//				}
				//				asteroid.translate(asteroid.getAngle(), asteroid.getSpeed());
				//				graphicsMan.drawAsteroid(asteroid, g2d, this);

				if(asteroid.getY() + asteroid.getSpeed() < this.getHeight()){
					if((asteroid.getX()<0) || (asteroid.getX()>(this.getWidth()-asteroid.getAsteroidWidth()))){
						asteroid.setAngle(-asteroid.getAngle());
					}
					asteroid.translate(asteroid.getAngle(), asteroid.getSpeed());
					graphicsMan.drawAsteroid(asteroid, g2d, this);
				}
				else{
					asteroid.setLocation(rand.nextInt(getWidth() - asteroid.width), 0);
					asteroid.setAngle(rand.nextInt(8)-4);
				}
			}

			if((level >= 3) && (level%5 != 0)){
				//Random random2 = new Random();
				// draw the asteroid until it reaches the bottom of the screen
				if(enemyShip.getY() + enemyShip.getEnemySpeed() < this.getHeight()){
					enemyShip.translate(enemyShip.getEnemyAngle(), enemyShip.getEnemySpeed());
					graphicsMan.drawEnemyShip(enemyShip, g2d, this);
					//enemy firing
					if(Math.abs(enemyShip.x-ship.x) <= 20){
						long currentTime = System.currentTimeMillis();
						if((currentTime - lastEnemyBulletTime) > 1000/5){
							lastEnemyBulletTime = currentTime;
							gameLogic.fireEnemyBullet();
						}
					}
				}


				else{
					enemyShip.setLocation(rand.nextInt(getWidth() - enemyShip.width), 0);
					enemyShip.setEnemyAngle(rand.nextInt(8)-4);
				}
			}

			//TODO
			if(level%5 == 0){

				asteroid.setLocation(-100, -100);
				enemyShip.setLocation(-100, -100);

				if(boss.getX() + boss.getBossSpeed() < this.getWidth()){
					boss.translate(boss.getBossAngle(), 0);
					if(bossDmg){
						graphicsMan.makeBossNormal();
						bossDmg=false;}
					graphicsMan.drawBoss(boss, g2d, this);
					//enemy firing

					if(boss.getX()>0){
						entry = true;
					}

					if(((boss.getX()<0) && entry) || ((boss.getX()>(this.getWidth()-boss.getBossWidth())) && entry)){
						boss.setBossAngle(-boss.getBossAngle());
					}

					//					if(Math.abs(ship.x-boss.x) <= 50){
					long currentTime = System.currentTimeMillis();
					if(bulletsFiredBoss==10){
						lastEnemyBulletTime=System.currentTimeMillis()+200;
						bulletsFiredBoss=0;
					}
					if((currentTime - lastEnemyBulletTime) > 60){
						lastEnemyBulletTime = currentTime;
						gameLogic.fireBossBullet();
						bulletsFiredBoss++;
					}
					//					}
				}
			}
		}
		else{
			long currentTime = System.currentTimeMillis();
			if((currentTime - lastAsteroidTime) > NEW_ASTEROID_DELAY){
				// draw a new asteroid
				lastAsteroidTime = currentTime;
				status.setNewAsteroid(false);
				asteroid.setLocation(rand.nextInt(getWidth() - asteroid.width), 0);
				if (level >= 2){
					asteroid.setAngle(rand.nextInt(8)-4);
				}
			}
			else{
				// draw explosion
				graphicsMan.drawAsteroidExplosion(asteroidExplosion, g2d, this);
			}
		}

		if(!status.isNewEnemy()){
			if((level >= 3) && (level%5 != 0)){
				//Random random2 = new Random();
				// draw the asteroid until it reaches the bottom of the screen
				if(enemyShip.getY() + enemyShip.getEnemySpeed() < this.getHeight()){
					if((enemyShip.getX()<0) || (enemyShip.getX()>(this.getWidth()-enemyShip.getEnemyWidth()))){
						enemyShip.setEnemyAngle(-enemyShip.getEnemyAngle());
					}
					enemyShip.translate(enemyShip.getEnemyAngle(), enemyShip.getEnemySpeed());
					graphicsMan.drawEnemyShip(enemyShip, g2d, this);
				}
				else{
					enemyShip.setLocation(rand.nextInt(getWidth() - enemyShip.width), 0);
					enemyShip.setEnemyAngle(rand.nextInt(8)-4); 
				}
			}
		}
		else{
			long currentTime = System.currentTimeMillis();
			if((currentTime - lastEnemyShipTime) > NEW_ENEMYSHIP_DELAY){
				// draw a new asteroid
				lastEnemyShipTime = currentTime;
				status.setNewEnemy(false);
				enemyShip.setLocation(rand.nextInt(getWidth() - enemyShip.width), 0);
			}
			else{
				// draw explosion
				graphicsMan.drawAsteroidExplosion(asteroidExplosion, g2d, this);
			}
		}

		// draw bullets
		for(int i=0; i<bullets.size(); i++){
			Bullet bullet = bullets.get(i);
			graphicsMan.drawBullet(bullet, g2d, this);


			boolean remove = gameLogic.moveBullet(bullet);
			if(remove){
				bullets.remove(i);
				i--;
			}
		}

		// draw enemy enemy bullets
		for(int i=0; i<enemyBullets.size(); i++){
			EnemyBullet enemyBullet = enemyBullets.get(i);
			graphicsMan.drawEnemyBullet(enemyBullet, g2d, this);
			graphicsMan.drawBossBullet(enemyBullet, g2d, this);

			boolean remove = gameLogic.moveEnemyBullet(enemyBullet);
			if(remove){
				enemyBullets.remove(i);
				i--;
			}
		}



		// check bullet-asteroid collisions
		for(int i=0; i<bullets.size(); i++){
			Bullet bullet = bullets.get(i);
			if(asteroid.intersects(bullet)){
				// increase asteroids destroyed count
				status.setAsteroidsDestroyed(status.getAsteroidsDestroyed() + 1);
				status.setScore(status.getScore() + 50);
				// "remove" asteroid
				asteroidExplosion = new Rectangle(
						asteroid.x,
						asteroid.y,
						asteroid.width,
						asteroid.height);
				asteroid.setLocation(-asteroid.width, -asteroid.height);
				if (level >= 2){
					asteroid.setAngle(rand.nextInt(8)-4);
				}
				status.setNewAsteroid(true);
				lastAsteroidTime = System.currentTimeMillis();

				// play asteroid explosion sound
				soundMan.playAsteroidExplosionSound();


				// remove bullet
				bullets.remove(i);
				break;
			}

		}


		// check bullet-enemyShip collisions
		for(int i=0; i<bullets.size(); i++){
			Bullet bullet = bullets.get(i);
			if(enemyShip.intersects(bullet)){
				// increase asteroids destroyed count
				status.setAsteroidsDestroyed(status.getAsteroidsDestroyed() + 1);
				status.setScore(status.getScore() + 50);
				// "remove" asteroid
				// "remove" enemy
				asteroidExplosion = new Rectangle(
						enemyShip.x,
						enemyShip.y,
						enemyShip.width,
						enemyShip.height);
				enemyShip.setLocation(-asteroid.width, -asteroid.height);
				status.setNewEnemy(true);
				lastEnemyShipTime = System.currentTimeMillis();

				// play asteroid explosion sound
				soundMan.playAsteroidExplosionSound();

				// remove bullet
				bullets.remove(i);
				break;
			}
		}

		// check bullet-boss collisions
		for(int i=0; i<bullets.size(); i++){
			Bullet bullet = bullets.get(i);
			if (boss.intersects(bullet)){
				//updates boss hits
				hitsBoss++;
				// remove bullet
				bullets.remove(i);
				soundMan.playBulletHitSound();
				graphicsMan.makeBossDmg();
				bossDmg=true;

				if(hitsBoss >= hitsReq){
					// increase asteroids destroyed count
					status.setAsteroidsDestroyed(status.getAsteroidsDestroyed() + 1);
					status.setScore(status.getScore() + 2000);
					// "remove" enemy
					bossExplosion = new Rectangle(
							boss.x,
							boss.y,
							boss.width,
							boss.height);
					boss.setLocation(-boss.width, -boss.height);
					status.setNewBoss(true);
					graphicsMan.drawBossExplosion(bossExplosion, g2d, this);
					lastBossShipTime = System.currentTimeMillis();

					// play asteroid explosion sound
					soundMan.playBossExplosionSound();

					entry = false;
					hitsBoss =0;
					hitsReq=(hitsReq*2);
					level++;
					drawLevelUp();
					boss.setBossSpeed(boss.getBossSpeed()+2);
					break;
				}
			}
		}

		// check enemyBullet-Ship collisions
		for(int i=0; i<enemyBullets.size(); i++){
			EnemyBullet enemyBullet = enemyBullets.get(i);
			if(ship.intersects(enemyBullet)){
				// increase asteroids destroyed count
				status.setShipsLeft(status.getShipsLeft() - 1);


				// "remove" ship
				shipExplosion = new Rectangle(
						ship.x,
						ship.y,
						ship.width,
						ship.height);
				ship.setLocation(this.getWidth() + ship.width, -ship.height);
				status.setNewShip(true);
				lastShipTime = System.currentTimeMillis();

				// play ship explosion sound
				soundMan.playShipExplosionSound();
				// play asteroid explosion sound
				soundMan.playAsteroidExplosionSound();

				// play asteroid explosion sound
				soundMan.playAsteroidExplosionSound();

				// remove bullet
				enemyBullets.remove(i);
				break;
			}
		}

		// draw ship
		if(!status.isNewShip()){
			// draw it in its current location
			graphicsMan.drawShip(ship, g2d, this);
			drawNewLevel();
		}
		else{
			// draw a new one
			long currentTime = System.currentTimeMillis();
			if((currentTime - lastShipTime) > NEW_SHIP_DELAY){
				lastShipTime = currentTime;
				status.setNewShip(false);
				ship = gameLogic.newShip(this);
			}
			else{
				// draw explosion
				graphicsMan.drawShipExplosion(shipExplosion, g2d, this);
			}
		}

		// draw boss
		if(!status.isNewBoss()){
			// draw it in its current location
			graphicsMan.drawBoss(boss, g2d, this);
			drawNewLevel();
		}
		else{
			// draw a new one
			long currentTime = System.currentTimeMillis();
			if((currentTime - lastBossShipTime) > NEW_BOSS_DELAY){
				lastBossShipTime = currentTime;
				status.setNewBoss(false);
				boss = gameLogic.newBoss(this);
			}
			else{
				// draw explosion
				graphicsMan.drawBossExplosion(bossExplosion, g2d, this);
			}
		}

		// check ship-enemy collisions
		if(enemyShip.intersects(ship)){
			// decrease number of ships left
			status.setShipsLeft(status.getShipsLeft() - 1);

			// "remove" enemy
			asteroidExplosion = new Rectangle(
					enemyShip.x,
					enemyShip.y,
					enemyShip.width,
					enemyShip.height);
			enemyShip.setLocation(-asteroid.width, -asteroid.height);
			status.setNewEnemy(true);
			lastEnemyShipTime = System.currentTimeMillis();

			// "remove" ship
			shipExplosion = new Rectangle(
					ship.x,
					ship.y,
					ship.width,
					ship.height);
			ship.setLocation(this.getWidth() + ship.width, -ship.height);
			status.setNewShip(true);
			lastShipTime = System.currentTimeMillis();

			// play ship explosion sound
			soundMan.playShipExplosionSound();
			// play asteroid explosion sound
			soundMan.playAsteroidExplosionSound();
		}

		//Boos-Ship collision
		if(boss.intersects(ship)){
			// decrease number of ships left
			status.setShipsLeft(status.getShipsLeft() - 1);

			// "remove" ship
			shipExplosion = new Rectangle(
					ship.x,
					ship.y,
					ship.width,
					ship.height);
			ship.setLocation(this.getWidth() + ship.width, -ship.height);
			status.setNewShip(true);
			lastShipTime = System.currentTimeMillis();

			// play ship explosion sound
			soundMan.playShipExplosionSound();
			// play asteroid explosion sound
			soundMan.playAsteroidExplosionSound();
		}



		if(asteroid.intersects(ship)){
			// decrease number of ships left
			status.setShipsLeft(status.getShipsLeft() - 1);

			// "remove" asteroid
			asteroidExplosion = new Rectangle(
					asteroid.x,
					asteroid.y,
					asteroid.width,
					asteroid.height);
			asteroid.setLocation(-asteroid.width, -asteroid.height);
			if (level >= 2){
				asteroid.setAngle(rand.nextInt(8)-4);
			}
			status.setNewAsteroid(true);
			lastAsteroidTime = System.currentTimeMillis();

			// "remove" ship
			shipExplosion = new Rectangle(
					ship.x,
					ship.y,
					ship.width,
					ship.height);
			ship.setLocation(this.getWidth() + ship.width, -ship.height);
			if (level >= 2){
				asteroid.setAngle(rand.nextInt(8)-4);
			}
			status.setNewShip(true);
			lastShipTime = System.currentTimeMillis();

			// play ship explosion sound
			soundMan.playShipExplosionSound();
			// play asteroid explosion sound
			soundMan.playAsteroidExplosionSound();

		}

		// update asteroids destroyed label
		destroyedValueLabel.setText(Long.toString(status.getAsteroidsDestroyed()));

		//update score label status.setScore(status.getScore() + 50);
		scoreValueLabel.setText(Long.toString(status.getScore()));

		// update ships left label
		shipsValueLabel.setText(Integer.toString(status.getShipsLeft()));
	}

	/**
	 * Draws the "Game Over" message.
	 */
	private void drawGameOver() {
		String gameOverStr = "GAME OVER";
		Font currentFont = biggestFont == null? bigFont : biggestFont;
		float fontSize = currentFont.getSize2D();
		bigFont = currentFont.deriveFont(fontSize + 1).deriveFont(Font.BOLD);
		FontMetrics fm = g2d.getFontMetrics(bigFont);
		int strWidth = fm.stringWidth(gameOverStr);
		if(strWidth > this.getWidth() - 300){
			biggestFont = currentFont;
			bigFont = biggestFont;
			fm = g2d.getFontMetrics(bigFont);
			strWidth = fm.stringWidth(gameOverStr);
		}
		int ascent = fm.getAscent();
		int strX = (this.getWidth() - strWidth)/2;
		int strY = (this.getHeight() + ascent)/2;
		g2d.setFont(bigFont);
		g2d.setPaint(Color.WHITE);
		g2d.drawString(gameOverStr, strX, strY);
	}

	private void drawLevelUp() {
		String levelUpStr = "LEVEL UP!";
		g2d.setFont(originalFont.deriveFont(originalFont.getSize2D() + 1));
		Font currentFont = biggestFont == null? bigFont : biggestFont;
		float fontSize = currentFont.getSize2D();
		bigFont = currentFont.deriveFont(fontSize + 1).deriveFont(Font.BOLD);
		FontMetrics fm = g2d.getFontMetrics(bigFont);
		int strWidth = fm.stringWidth(levelUpStr);
		if(strWidth > this.getWidth() - 300){
			biggestFont = currentFont;
			bigFont = biggestFont;
			fm = g2d.getFontMetrics(bigFont);
			strWidth = fm.stringWidth(levelUpStr);
		}
		int ascent = fm.getAscent();
		int strX = (this.getWidth() - strWidth)/2;
		int strY = (this.getHeight() + ascent)/2;
		g2d.setFont(bigFont);
		g2d.setPaint(Color.WHITE);
		g2d.drawString(levelUpStr, strX, strY);
	}

	/**
	 * Draws the initial "Get Ready!" message.
	 */
	private void drawGetReady() {
		String readyStr = "Get Ready!";
		g2d.setFont(originalFont.deriveFont(originalFont.getSize2D() + 1));
		FontMetrics fm = g2d.getFontMetrics();
		int ascent = fm.getAscent();
		int strWidth = fm.stringWidth(readyStr);
		int strX = (this.getWidth() - strWidth)/2;
		int strY = (this.getHeight() + ascent)/2;
		g2d.setPaint(Color.WHITE);
		g2d.drawString(readyStr, strX, strY);
	}

	private void drawNewLevel() {
		String readyStr = "Level " + level;
		g2d.setFont(originalFont.deriveFont(originalFont.getSize2D() + 1));
		FontMetrics fm = g2d.getFontMetrics();
		int ascent = fm.getAscent();
		int strWidth = fm.stringWidth(readyStr);
		g2d.setPaint(Color.WHITE);
		g2d.drawString(readyStr, 15, 20);
	}

	/**
	 * Draws the specified number of stars randomly on the game screen.
	 * @param numberOfStars the number of stars to draw
	 */
	private void drawStars(int numberOfStars) {
		g2d.setColor(Color.WHITE);
		for(int i=0; i<numberOfStars; i++){
			int x = (int)(Math.random() * this.getWidth());
			int y = (int)(Math.random() * this.getHeight());
			g2d.drawLine(x, y, x, y);
		}
	}

	/**
	 * Display initial game title screen.
	 */
	private void initialMessage() {
		String gameTitleStr = "Void Space";

		Font currentFont = biggestFont == null? bigFont : biggestFont;
		float fontSize = currentFont.getSize2D();
		bigFont = currentFont.deriveFont(fontSize + 1).deriveFont(Font.BOLD).deriveFont(Font.ITALIC);
		FontMetrics fm = g2d.getFontMetrics(bigFont);
		int strWidth = fm.stringWidth(gameTitleStr);
		if(strWidth > this.getWidth() - 10){
			bigFont = currentFont;
			biggestFont = currentFont;
			fm = g2d.getFontMetrics(currentFont);
			strWidth = fm.stringWidth(gameTitleStr);
		}
		g2d.setFont(bigFont);
		int ascent = fm.getAscent();
		int strX = (this.getWidth() - strWidth)/2;
		int strY = (this.getHeight() + ascent)/2 - ascent;
		g2d.setPaint(Color.YELLOW);
		g2d.drawString(gameTitleStr, strX, strY);

		g2d.setFont(originalFont);
		fm = g2d.getFontMetrics();
		String newGameStr = "Press <Space> to Start a New Game.";
		strWidth = fm.stringWidth(newGameStr);
		strX = (this.getWidth() - strWidth)/2;
		strY = (this.getHeight() + fm.getAscent())/2 + ascent + 16;
		g2d.setPaint(Color.WHITE);
		g2d.drawString(newGameStr, strX, strY);

		fm = g2d.getFontMetrics();
		String exitGameStr = "Press <Esc> to Exit the Game.";
		strWidth = fm.stringWidth(exitGameStr);
		strX = (this.getWidth() - strWidth)/2;
		strY = strY + 16;
		g2d.drawString(exitGameStr, strX, strY);
	}


	/**
	 * Prepare screen for game over.
	 */
	public void doGameOver(){
		shipsValueLabel.setForeground(new Color(128, 0, 0));
	}

	/**
	 * Prepare screen for a new game.
	 */
	public void doNewGame(){		
		lastAsteroidTime = -NEW_ASTEROID_DELAY;
		lastShipTime = -NEW_SHIP_DELAY;

		bigFont = originalFont;
		biggestFont = null;
		level = 1;
		status.setScore(0);
		asteroidsReq = 5;
		hitsBoss =0;
		entry = false;

		// set labels' text
		shipsValueLabel.setForeground(Color.BLACK);
		shipsValueLabel.setText(Integer.toString(status.getShipsLeft()));
		destroyedValueLabel.setText(Long.toString(status.getAsteroidsDestroyed()));
	}

	/**
	 * Sets the game graphics manager.
	 * @param graphicsMan the graphics manager
	 */
	public void setGraphicsMan(GraphicsManager graphicsMan) {
		this.graphicsMan = graphicsMan;
	}

	/**
	 * Sets the game logic handler
	 * @param gameLogic the game logic handler
	 */
	public void setGameLogic(GameLogic gameLogic) {
		this.gameLogic = gameLogic;
		this.status = gameLogic.getStatus();
		this.soundMan = gameLogic.getSoundMan();
	}

	/**
	 * Sets the label that displays the value for asteroids destroyed.
	 * @param destroyedValueLabel the label to set
	 */
	public void setDestroyedValueLabel(JLabel destroyedValueLabel) {
		this.destroyedValueLabel = destroyedValueLabel;
	}

	/**
	 * Sets the label that displays the value for ship (lives) left
	 * @param shipsValueLabel the label to set
	 */
	public void setShipsValueLabel(JLabel shipsValueLabel) {
		this.shipsValueLabel = shipsValueLabel;
	}

	public void setScoreValueLabel(JLabel scoreValueLabel) {
		this.scoreValueLabel = scoreValueLabel;
	}
}
